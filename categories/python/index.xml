<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Grey Times</title>
    <link>http://localhost:1313/categories/python/</link>
    <description>Recent content in Python on Grey Times</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sat, 16 Mar 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>《Python学习笔记》的笔记</title>
      <link>http://localhost:1313/posts/python-note-1/</link>
      <pubDate>Sat, 16 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/posts/python-note-1/</guid>
      <description>

&lt;p&gt;这是对雨痕写的Python学习笔记的学习。&lt;/p&gt;

&lt;h2 id=&#34;基本环境:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;基本环境&lt;/h2&gt;

&lt;p&gt;对象总是按引用用传递,简单点说就是通过复制指针来实现多个名字指向同一一对象。
因为 arena 也是在堆上分配的,所以无无论何种类型何种大大小小的对象,都存储在堆上。Python 没有值类型和引用用类型一一说,就算是最简单的整数也是拥有标准头的完整对象。&lt;/p&gt;

&lt;h3 id=&#34;引用计数:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;引用计数&lt;/h3&gt;

&lt;p&gt;除了直接引用用外,Python还支支持弱引用用。允许在不增加引用用计数,不妨碍对象回收的情况下间接引用用对象。但不是所有类型都支支持弱引用用,比比如 list、dict ,弱引用用会引发异常。&lt;/p&gt;

&lt;h3 id=&#34;垃圾回收:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;垃圾回收&lt;/h3&gt;

&lt;p&gt;Python 拥有两套垃圾回收机制。除了引用计数,还有个专⻔门处理循环引用的 GC。通常我们提到垃圾回收时,都是指这个 &amp;ldquo;Reference Cycle Garbage Collection&amp;rdquo;。&lt;/p&gt;

&lt;p&gt;能引发循环引用用问题的,都是那种容器类对象,比比如 list、set、object 等。对于这类对象,虚拟机在为其分配内存时,会额外添加用用于追踪的PyGC_Head。这些对象被添加到特殊链表里里,以便GC 进行行管理。 如果不存在循环引用,自然是积极性更高的引用计数机制抢先给处理掉。也就是说,只要不存在循环引用,理论上可以禁用GC。当执行行某些密集运算时,临时关掉GC有助于提升性能。&lt;/p&gt;

&lt;p&gt;#世代回收&lt;/p&gt;

&lt;h2 id=&#34;内置类型:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;内置类型&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;尽量使用xrange代替range&lt;/strong&gt;，每次迭代后,数字对象被回收,其占用用内存空闲出来并被复用用,内存也就不会暴涨了。&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;字符串:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;字符串&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; &amp;quot;,&amp;quot;.join([&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;])
&#39;a,b,c&#39;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;a,b,c&amp;quot;.split(&amp;quot;,&amp;quot;)
!
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
&amp;gt;&amp;gt;&amp;gt; &amp;quot;a\nb\r\nc&amp;quot;.splitlines()
[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]
&amp;gt;&amp;gt;&amp;gt;&amp;quot;a\nb\r\nc&amp;quot;.splitlines(True)
[&#39;a\n&#39;, &#39;b\r\n&#39;, &#39;c&#39;]
&amp;gt;&amp;gt;&amp;gt; &amp;quot;abc&amp;quot;.startswith(&amp;quot;ab&amp;quot;), &amp;quot;abc&amp;quot;.endswith(&amp;quot;bc&amp;quot;)
True, True
&amp;gt;&amp;gt;&amp;gt; &amp;quot;abc&amp;quot;.upper(), &amp;quot;Abc&amp;quot;.lower()
&#39;ABC&#39;, &#39;abc&#39;

&amp;gt;&amp;gt;&amp;gt; &amp;quot;abcabc&amp;quot;.find(&amp;quot;bc&amp;quot;), &amp;quot;abcabc&amp;quot;.find(&amp;quot;bc&amp;quot;, 2) # 可指定查找起始结束位置。
1, 4
&amp;gt;&amp;gt;&amp;gt; &amp;quot; abc&amp;quot;.lstrip(), &amp;quot;abc &amp;quot;.rstrip(), &amp;quot; abc &amp;quot;.strip() # 剔除前后空格。
&#39;abc&#39;, &#39;abc&#39;, &#39;abc&#39;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;abc&amp;quot;.strip(&amp;quot;ac&amp;quot;)  # 可删除指定的前后缀字符。
&#39;b&#39;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;abcabc&amp;quot;.replace(&amp;quot;bc&amp;quot;, &amp;quot;BC&amp;quot;)# 可指定替换次数。
&#39;aBCaBC&#39;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;a\tbc&amp;quot;.expandtabs(4)
&#39;a  bc&#39;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;123&amp;quot;.ljust(5, &#39;0&#39;), &amp;quot;456&amp;quot;.rjust(5, &#39;0&#39;), &amp;quot;abc&amp;quot;.center(10, &#39;*&#39;) # 填充
&#39;12300&#39;, &#39;00456&#39;, &#39;***abc****&#39;
&amp;gt;&amp;gt;&amp;gt; &amp;quot;123&amp;quot;.zfill(6), &amp;quot;123456&amp;quot;.zfill(4) # 数字填充
&#39;000123&#39;, &#39;123456&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;string.Template可以处理较复杂的需求&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&#34;池化:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;池化&lt;/h3&gt;

&lt;p&gt;池化有助于减少对象数量和内存消耗,提升性能。用 intern() 函数可以把运行期动态生成的字符串池化。&lt;/p&gt;

&lt;h3 id=&#34;list:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;List&lt;/h3&gt;

&lt;p&gt;可用bisect 向有序列表中插入元素。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;性能&lt;/strong&gt;
1. 列表用realloc()调整指针数组内存大小,可能需要复制数据。插入和删除操作,还会循环移动后续元素。这些都是潜在的性能隐患。对于频繁增删元素的大型列表,应该考虑用用链表等数据结构代替。
2. 某些时候,可以考虑用数组代替列表。和列表存储对象指针不同,数组直接内嵌数据,既省了创建对象的内存开销,又提升了读写效率。&lt;/p&gt;

&lt;p&gt;###tuple
在编码中,应该尽可能用用元组代替列表。除内存复用更高效外,其只读特征更利于并行开发。&lt;/p&gt;

&lt;p&gt;###dict
字典 (dict) 采用用开放地址法的哈希表实现。
• 自带元素容量为 8 的 smalltable,只有 &amp;ldquo;超出&amp;rdquo;时才到堆上额外分配元素表内存。
• 虚拟机缓存 80 个字典复用对象,但在堆上分配的元素表内存会被释放。
• 按需动态调整容量。扩容或收缩操作都将重新分配内存,重新哈希。
• 删除元素操作不会立立即收缩内存。&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;对于大字典,调用 keys()、values()、items() 会构造同样巨大的列表。建议用用迭代器替代,以减
少内存开销。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h4 id=&#34;视图:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;视图&lt;/h4&gt;

&lt;p&gt;要判断两个字典间的差异,使用用视图是最简便的做法。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; d1 = dict(a = 1, b = 2)
&amp;gt;&amp;gt;&amp;gt; d2 = dict(b = 2, c = 3)
&amp;gt;&amp;gt;&amp;gt; d1 &amp;amp; d2 # 字典不支支持该操作。
TypeError: unsupported operand type(s) for &amp;amp;: &#39;dict&#39; and &#39;dict&#39;
&amp;gt;&amp;gt;&amp;gt; v1 = d1.viewitems()
&amp;gt;&amp;gt;&amp;gt; v2 = d2.viewitems()
&amp;gt;&amp;gt;&amp;gt; v1 &amp;amp; v2  # 交集
set([(&#39;b&#39;, 2)])
&amp;gt;&amp;gt;&amp;gt; v1 | v2  #并
set([(&#39;a&#39;, 1), (&#39;b&#39;, 2), (&#39;c&#39;, 3)])
&amp;gt;&amp;gt;&amp;gt; v1 - v2  # 差集 (仅 v1 有,v2 没有的)
set([(&#39;a&#39;, 1)])
&amp;gt;&amp;gt;&amp;gt; v1 ^ v2  #对称差集 (不会同时出现在 v1 和 v2 中)
set([(&#39;a&#39;, 1), (&#39;c&#39;, 3)])
&amp;gt;&amp;gt;&amp;gt; (&#39;a&#39;, 1) in v1
True
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;set:92ca2ff6f04c0f4fcf9327caf7cf2980&#34;&gt;set&lt;/h3&gt;

&lt;p&gt;集合 (set) 用来存储无序不重复对象。所谓不重复对象,除了不是同一对象外,还包括 &amp;ldquo;值&amp;rdquo; 不能相同。集合只能存储可哈希对象,一样有只读版本 frozenset。&lt;/p&gt;

&lt;p&gt;运算： ==， ！=， &amp;gt;, |, &amp;amp; ,-, ^&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;数据结构很重要,这几个内置类型并不足以完成全部工作。像 C、数据结构、常用算法这类基础是每个程序开发人员都应该掌握的。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
    </item>
    
  </channel>
</rss>